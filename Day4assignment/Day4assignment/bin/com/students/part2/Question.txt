Ques 1: How to convert a Array into ArrayList and vice-versa? Write example code snippet?

Ans 1 : To convert a Array into ArrayList and ArrayList to Array in java is given below :

for eg : 

	public class ArrayToArrayList 
	{  
    	public static void main(String[] args) 
    	{  
   			List<String> fruitList = new ArrayList<>(); 	//creating Arraylist    
        	fruitList.add("papaya");  			//adding String Objects to fruitsList ArrayList 
        	fruitList.add("Grapes");  	
        	fruitList.add("Apple");  
        	fruitList.add("Gvava");  
        	fruitList.add("Pineapple");  
        	System.out.println("Converting ArrayList to Array" );  
        	String[] item = fruitList.toArray(new String[fruitList.size()]);  
        	for(String s : item)
        	{  
            	System.out.println(s);  
        	}  
        	System.out.println("Converting Array to ArrayList" );  
        	List<String> l2 = new ArrayList<>();  
        	l2 =  Arrays.asList(item);  
        	System.out.println(l2);  
    	}  
	}  

Output : 

Converting ArrayList to Array
papaya
Grapes
Apple
Gvava
Pineapple
Converting Array to ArrayList
[papaya, Grapes, Apple, Gvava, Pineapple]

Ques 2: Why collections are used in java if everything can be implemented using Array?

Ans 2 : Arrays can hold the only the same type of data in its collection i.e only homogeneous data types 
		elements are allowed in case of arrays.
		Collection, can hold both homogeneous and heterogeneous elements.
		Arrays are fixed in size and collection is dynamic in size i.e based on requirement size could be get 
		altered even after its declaration.

Ques 3: What are fail-fast and fail-safe collection iterations

Ans 3 : Fail-fast and Fail-safe iterations in Java Collections. Fail-safe iterators means they will not throw 
		any exception even if the collection is modified while iterating over it. Whereas Fail-fast iterators 
		throw an exception (ConcurrentModificationException) if the collection is modified while iterating 
		over it.

Ques 4: Difference between Iterator and ListIterator

Ans 4 : ListIterator is the child interface of Iterator interface. The major difference between Iterator and 
		ListIterator is that Iterator can traverse the elements in the collection only in forward direction 
		whereas, the ListIterator can traverse the elements in a collection in both the forward as well as the 
		backwards direction.

Ques 5: Explain the real situation use of HashMap, HashSet and LinkedList collections

Ans 5 : HashMap : Java HashMap class implements the Map interface which allows us to store key and value pair, 
		where keys should be unique. If you try to insert the duplicate key, it will replace the element of 
		the corresponding key. It is easy to perform operations using the key index like updation, deletion, 
		etc.

for eg :
		
		import java.util.*;  
		public class HashMapEg
		{  
 			public static void main(String args[])
 			{  
   				HashMap<Integer,String> map=new HashMap<Integer,String>();//Creating HashMap    
   				map.put(1,"Gvava");  // Put elements in Map  
   				map.put(2,"Apple");    
   				map.put(3,"Banana");   
   				map.put(4,"Papaya");   

   				for(Map.Entry m : map.entrySet())
   				{    
    				System.out.println(m.getKey()+" "+m.getValue());    
   				}  
			}  
		}
		
Output :
1 Gvava
2 Apple
3 Banana
4 Papaya
		   		
HashSet : Java HashSet class is used to create a collection that uses a hash table for storage. It inherits 
		  the AbstractSet class and implements Set interface.

- HashSet stores the elements by using a mechanism called hashing.
- HashSet contains unique elements only.
- HashSet allows null value.
- HashSet class is non synchronized.
- HashSet doesn't maintain the insertion order. Here, elements are inserted on the basis of their hashcode.
- HashSet is the best approach for search operations.
- The initial default capacity of HashSet is 16, and the load factor is 0.75.

for eg : 

		   import java.util.*;  
		   class HashSetEg
		   {  
 				public static void main(String args[]) 	//Creating HashSet and adding elements  
 				{   
    				HashSet<String> set=new HashSet();  
           			set.add("One");    
           			set.add("Two");    
           			set.add("Three");   
           			set.add("Four");  
           			set.add("Five");  
           			Iterator<String> i=set.iterator();  
           			while(i.hasNext())  
           			{  
           				System.out.println(i.next());  
           			}  
 				}
			}
			
Output : 
Five
One
Four
Two
Three
			
LinkedList : LinkedList is a doubly-linked list implementation. Implementing both the List and Deque (an 
			extension of Queue) interfaces. Unlike ArrayList, when we store data in a LinkedList, every 
			element maintains a link to the previous one.
			
for eg : 

		import java.util.*;  
		public class LinkedListEg
		{  
 			public static void main(String args[])
 			{  
  				LinkedList<String> al=new LinkedList<String>();  
  				al.add("Deepak");  
  				al.add("Kumar");  
  				al.add("Rajat");  
  				al.add("Sujay");  
  
  				Iterator<String> itr=al.iterator();  
  				while(itr.hasNext())
  				{  
   					System.out.println(itr.next());  
  				}  
 			}  
		}
		
Output : 
Deepak
Kumar
Rajat
Sujay